I"&2<p>Уже много лет следую концепции, что тесты сами подготавливают себе данные. Было много подходов хранения: в json файлах, в xml файлах, в коде, в SpecFlow файлах. У каждого подхода свои преимущества и недостатки.</p>

<p>Проблема хранения данных в файлах состоит в том, что внешние файлы сложно поддерживать. Нельзя нажать Ctrl+B и сразу же перейти к полю в json файле. Добавление или удаление полей в модели никак не отразится в момент компиляции, если разработчик забыл обновить файлы.</p>

<p>Можно еще писать билдеры для моделей. Этот вариант более безопасный. Проблема в том, что если модель сложная, то билдеров придется написать много.</p>

<p>Как улучшенную альтернативу билдерам использую <a href="https://github.com/AutoFixture/AutoFixture">AutoFixture</a>. Библиотека создает сложные объекты и заполняет их случайными данными. AutoFixture умеет присваивать отдельным полям конкретные значения, а  остальные будут сгенерированы в зависимости от типа поля.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">Fact</span><span class="p">]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">IntroductoryTest</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="n">Fixture</span> <span class="n">fixture</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Fixture</span><span class="p">();</span>

    <span class="kt">int</span> <span class="n">expectedNumber</span> <span class="p">=</span> <span class="n">fixture</span><span class="p">.</span><span class="n">Create</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
    <span class="n">MyClass</span> <span class="n">sut</span> <span class="p">=</span> <span class="n">fixture</span><span class="p">.</span><span class="n">Create</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
    <span class="c1">// Act</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="nf">Echo</span><span class="p">(</span><span class="n">expectedNumber</span><span class="p">);</span>
    <span class="c1">// Assert</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="n">expectedNumber</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Первый способ создания объектов, которые предоставляет Fixture - это вызов метода Create на экземпляре Fixture. В этом случае будет сгенерирован объект со случайными значениями во всех полях. Но что если нужно для некоторых полей задать конкретное значение? Для таких случаев можно кастомизировать инициализацию некоторых полей.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Fixture</span> <span class="n">fixture</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Fixture</span><span class="p">();</span>
<span class="n">fixture</span><span class="p">.</span><span class="n">Customize</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;(</span><span class="n">composer</span> <span class="p">=&gt;</span>
    <span class="n">composer</span>
        <span class="p">.</span><span class="nf">With</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">IsRemoved</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">With</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="s">"Class Name"</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>В этом случае у созданных объектов поле Name будет со значением “Class Name”, поле IsRemoved со значением false, а остальные поля будут заполнены случайно.</p>

<p>Второй способ - использовать метод Build. Можно кастомизировать поля и сразу же создать экземпляр класса.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Fixture</span> <span class="n">fixture</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Fixture</span><span class="p">();</span>
<span class="kt">var</span> <span class="n">instance</span> <span class="p">=</span> <span class="n">fixture</span><span class="p">.</span><span class="n">Build</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;()</span>
    <span class="p">.</span><span class="nf">With</span><span class="p">(</span><span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="s">"My Name"</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">With</span><span class="p">(</span><span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">Type</span><span class="p">,</span> <span class="s">"Test"</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Create</span><span class="p">();</span>
</code></pre></div></div>

<p>В этом случае кастомизация не сохраняется в экземпляре fixture и новые объекты не будут получать значение “My Name” в поле Name.</p>

<p>Этих двух подходов хватает в 80% случаев. Но было бы здорово преднастроить экземпляр fixture, а потом переопределить часть полей с помощью Build и создать новый объект. Проблема в том, что метод Build не учитывает настройки fixture, которые заданы методом Customize.</p>

<p>Скачав исходники и посмотрев что там внутри, я написал в extension метода, которые решают эту задачу.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">FixtureExtension</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">ICustomizationComposer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">For</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">Fixture</span> <span class="n">fixture</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">CompositeNodeComposer</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">fixture</span><span class="p">.</span><span class="nf">Graph</span><span class="p">());</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="n">ISpecimenBuilderNode</span> <span class="nf">Graph</span><span class="p">(</span><span class="k">this</span> <span class="n">Fixture</span> <span class="n">fixture</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">fieldInfo</span> <span class="p">=</span> <span class="n">fixture</span><span class="p">.</span><span class="nf">GetType</span><span class="p">().</span><span class="nf">GetField</span><span class="p">(</span><span class="s">"graph"</span><span class="p">,</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span><span class="p">);</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">ISpecimenBuilderNode</span><span class="p">)</span><span class="n">fieldInfo</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">fixture</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Теперь можно написать <code class="highlighter-rouge">fixture.For&lt;MyClass&gt;().With(x=&gt;x.Name, "My Name")</code> сохранить изначальные настройки fixture, а переопределить только одно поле Name и получить новый объект класса MyClass.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Fixture</span> <span class="n">fixture</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Fixture</span><span class="p">();</span>
<span class="n">fixture</span><span class="p">.</span><span class="n">Customize</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;(</span><span class="n">composer</span> <span class="p">=&gt;</span>
    <span class="n">composer</span>
        <span class="p">.</span><span class="nf">With</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">IsRemoved</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">With</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="s">"Class Name"</span><span class="p">)</span>
<span class="p">);</span>
<span class="kt">var</span> <span class="n">instance</span> <span class="p">=</span> <span class="n">fixture</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;()</span>
    <span class="p">.</span><span class="nf">With</span><span class="p">(</span><span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="s">"My Name"</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Create</span><span class="p">();</span>
</code></pre></div></div>

<p>Объект instance будет создан со значением false для поля IsRemoved, со значением “My Name” для поля Name и остальные поля будут заполнены случайным образом.</p>

<p>Такой вариант меня устраивает. Я настраиваю Fixture более реальными данными, а потом переопределяю некоторые поля в зависимости от теста. Количество кода сводится к минимуму, данные читабельные, выглядит это хорошо. Советую попробовать этот подход в вашем следующем тесте.</p>
:ET